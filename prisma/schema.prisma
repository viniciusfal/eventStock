generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id                 String                  @id @default(cuid())
  name               String                  @unique
  quantity           Int
  created_at         DateTime                @default(now())
  devolutions        devolutionsOnProducts[]
  RequestsOnProducts RequestsOnProducts[]

  @@map("products")
}

model User {
  id            String   @id @default(cuid())
  name          String
  email         String   @unique
  password_hash String
  created_at    DateTime @default(now())

  @@map("users")
}

model Bar {
  id          String       @id @default(cuid())
  name        String
  code        String
  created_at  DateTime     @default(now())
  devolutions Devolution[]
  request     Request[]
  event       Event?       @relation(fields: [event_id], references: [id])
  event_id    String?

  @@map("bars")
}

model Request {
  id                 String               @id @default(cuid())
  status             String
  event              Event?               @relation(fields: [event_id], references: [id])
  event_id           String?
  bar                Bar?                 @relation(fields: [bar_id], references: [id])
  bar_id             String?
  RequestsOnProducts RequestsOnProducts[]

  @@map("requests")
}

model Devolution {
  id         String                  @id @default(cuid())
  quantity   Int
  status     String
  created_at DateTime                @default(now())
  products   devolutionsOnProducts[]
  bar        Bar                     @relation(fields: [bar_id], references: [id])
  bar_id     String
  event      Event?                  @relation(fields: [event_id], references: [id])
  event_id   String?

  @@map("devolutions")
}

model Event {
  id              String       @id @default(cuid())
  name            String
  bars            Bar[]
  status          String
  active          Boolean      @default(true)
  requests        Request[]
  devolutions     Devolution[]
  initEventDate   DateTime?
  finishEventDate DateTime?

  @@map("events")
}

model RequestsOnProducts {
  product    Product? @relation(fields: [product_id], references: [id])
  product_id String
  request    Request? @relation(fields: [request_id], references: [id])
  request_id String

  @@id([product_id, request_id])
}

model devolutionsOnProducts {
  Product       Product?    @relation(fields: [product_id], references: [id])
  product_id    String
  Devolution    Devolution? @relation(fields: [devolution_id], references: [id])
  devolution_id String

  @@id([product_id, devolution_id])
}
